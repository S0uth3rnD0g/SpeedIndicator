# Settings
(def constant MOD_SI_SETTINGS {
	# colors for movement type [backward,forward]
	movementColors: [0xFF5050, 0x50FF50],
	# movement indicator alpha
	speedIndicatorAlpha: 0.7,
	# frequency = 20/cycle
	cycle: 4
})


(def element TargetLockItem (_markerEntity:gfx) layout=true
	(bindcall externalCall 'inputMapping.onAction' "['createParamsForAllShipsInBattle', {}]" on='addedToStage')
	(scope
		(macro GET_MARKER_ENTITY_COMPONENT 'target')
		(var targetFlags:number = "targetComponent ? targetComponent.flags : 0" (event "targetComponent.evChanged") (event "targetComponent.evFlagsChanged"))

		(var isTargetLocked:bool = "(targetFlags & LOCKABLE_WEAPONS) > 0")
		
		(var ttxCol:gfx = "$datahub.getCollection(CC.mods_ShipParamsInBattle)")

		(var entityTTX:gfx = "$datahub.getPrimaryEntity(CC.mods_ShipParamsInBattle, _markerEntity.avatar.id)" (event "ttxCol.evAdded"))
		
		(var isAirDefense:bool = "targetFlags & (1 << SC.Ships.SHIP_WEAPON_TYPES.AIRDEFENCE)")
		(var isATBA:bool = "targetFlags & (1 << SC.Ships.SHIP_WEAPON_TYPES.ATBA)")
		(var isPriorityTarget:bool = "isAirDefense || isATBA")
		(var priorityIcon:str = "isATBA ? 'atba' : 'aa'")

		(var targetIsAlive:bool = "_markerEntity && _markerEntity.hasComponent(CC.health) && _markerEntity.health.isAlive" (event "_markerEntity.health.evIsAliveChanged"))
		(var enabled:bool = "isTargetLocked && targetIsAlive")

		(var targetMapPosition:gfx = "_markerEntity.mapPosition")
		(var targetYaw:number = "radToGrad(targetMapPosition.yaw)" (event "evEnterFrame"))

		(var targetWorldVisible:bool = "_markerEntity && _markerEntity.hasComponent(CC.visibility) && _markerEntity.visibility.visible" (event "_markerEntity.visibility.evChanged"))
		(var targetMapVisible:bool = "_markerEntity && _markerEntity.hasComponent(CC.visibility) && _markerEntity.visibility.mapVisible" (event "_markerEntity.visibility.evChanged"))
		(var targetVisible:bool = "targetWorldVisible && targetMapVisible" (event "_markerEntity.visibility.evChanged"))

		(var targetPosition:gfx = "targetMapPosition.position")
		(var targetPosX:number = "targetPosition.x" (event "evEnterFrame"))
		(var targetPosY:number = "targetPosition.y" (event "evEnterFrame"))
		
		(macro GET_MAP_SIZE)
		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var battleTimer:gfx = "$datahub.getSingleComponent(CC.battleTimer)")
		
		(var incrementCount:number = "0" watch=false)
		(bind incrementCount "incrementCount+1" init=false watch=false (event "timerEntity.timer.evFrequent"))
		
		# speedArc calculation
		(event evspeedArcUpdate)
		(var posXList:array = [round(targetPosX * 100000),round(targetPosX * 100000),round(targetPosX * 100000),round(targetPosX * 100000)])
		(bind posXList "$event.posXList" init=false watch=false (event "evspeedArcUpdate"))
		(var posXCur:number = "(posXList[0]+posXList[1]+posXList[2]+posXList[3])/4" watch=false)
		(bind posXCur "$event.posXCur" init=false watch=false (event "evspeedArcUpdate"))
		
		(var posYList:array = [round(targetPosY * 100000),round(targetPosY * 100000),round(targetPosY * 100000),round(targetPosY * 100000)])
		(bind posYList "$event.posYList" init=false watch=false (event "evspeedArcUpdate"))
        (var posYCur:number = "(posYList[0]+posYList[1]+posYList[2]+posYList[3])/4" watch=false)
		(bind posYCur "$event.posYCur" init=false watch=false (event "evspeedArcUpdate"))

		(dispatch evspeedArcUpdate args = "{posXCur: 0.4*(posXList[0]+(1 - 0.4)*posXList[1]+pow(1 - 0.4, 2)*posXList[2]+pow(1 - 0.4, 3)*posXList[3]), posYCur: 0.4*(posYList[0]+(1 - 0.4)*posYList[1]+pow(1 - 0.4, 2)*posYList[2]+pow(1 - 0.4, 3)*posYList[3]),
										posXList: [round(targetPosX * 100000),posXList[0],posXList[1],posXList[2]], posYList: [round(targetPosY * 100000),posYList[0],posYList[1],posYList[2]]
										}" (bind trigger "floor(incrementCount / MOD_SI_SETTINGS.cycle)")
		)
		
		(event evspeedArcChanged)
		(var posXPrev:number = "posXCur" watch=false)
		(bind posXPrev "$event.posXPrev" init=false watch=false (event "evspeedArcChanged"))
		(var posXDiff:number = "posXCur - posXPrev")

		(var posYPrev:number = "posYCur" watch=false)
		(bind posYPrev "$event.posYPrev" init=false watch=false (event "evspeedArcChanged"))
		(var posYDiff:number = "posYCur - posYPrev")

		(var sqrDistDiff:number = "pow(posXDiff, 2) + pow(posYDiff, 2)")
		(var Speed:number = "0.0195*sqrt(sqrDistDiff)*mapSize")

		(var currentYawAngle:number = "abs(radToGrad(atan2(posXDiff, -posYDiff)) - round(targetYaw))")

		(var speedArc:number=-1)
		(bind speedArc "$event.speedArc" init=false watch=false (event "evspeedArcChanged"))
		(var course:number=-1)
		(bind course "$event.course" init=false watch=false (event "evspeedArcChanged"))
		(var targetMaxSpeed:number = "entityTTX.mods_ShipParamsInBattle.shipTTX.mobility.speed.value")
		
		(var targetVisiblePrev:bool=false watch=false)
		(bind targetVisiblePrev "$event.targetVisiblePrev" init=false watch=false (event "evspeedArcChanged"))

		(dispatch evspeedArcChanged args = "{speedArc: !(targetVisiblePrev && targetVisible)
												? 0
												: (Speed >= targetMaxSpeed)
													? 8
													: round(Speed*8/targetMaxSpeed), 
										course: (Speed*8/targetMaxSpeed < 1)
											? -1
											: (Speed > 100)
												? -1
												: ((currentYawAngle <= 50) || (currentYawAngle >= 310)) 
													? 1 #forward
													: ((currentYawAngle >= 130) && (currentYawAngle <= 230)) 
														? 0 #backward
														: -1, 
										targetVisiblePrev: targetVisible, posXPrev: posXCur, posYPrev: posYCur}"
										dir=0 (event "evspeedArcUpdate")
		)
		
		
		
		# # End of speedArc calculation
	)

	(mc AimForShipIcon_pro
		(style (marginTop = -1)) 
		(bindcall gotoAndStop "isTargetLocked ? 'vis' : 'inv'" init=true watch=false)
		(bindcall gotoAndPlay "isTargetLocked ? 'in' : 'out'" init=false)
	)
	(block
		(bind visible "enabled && (course > -1)")

		(style
			(position = "absolute")
			(align = "center|middle")
		)
		(block
			(controller $Sector
				(offset="-90")
				(bind arc "speedArc*45" )
				(radius="26" )
				(innerRadius="22")
				(bind colors "[MOD_SI_SETTINGS.movementColors[course]]")
				(alphas="[MOD_SI_SETTINGS.speedIndicatorAlpha]")
				(ratios=[255])		
			)
		)
	)
)